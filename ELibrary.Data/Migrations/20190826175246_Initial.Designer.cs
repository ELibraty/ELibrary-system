// <auto-generated />
using System;
using ELibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ELibrary.Data.Migrations
{
    [DbContext(typeof(ELibraryDbContext))]
    [Migration("20190826175246_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ELibrary.Data.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("ELibrary.Data.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author");

                    b.Property<string>("BookCode");

                    b.Property<string>("BookName");

                    b.Property<DateTime>("CreatOn");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("GenreId");

                    b.Property<int?>("GetBookId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GetBookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ELibrary.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookId");

                    b.Property<string>("GenreName");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("ELibrary.Data.Models.GetBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId");

                    b.Property<DateTime>("CreatOn");

                    b.Property<DateTime?>("ReturnDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("GetBooks");
                });

            modelBuilder.Entity("ELibrary.Data.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Location");

                    b.Property<string>("NameLibrary");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Library");
                });

            modelBuilder.Entity("ELibrary.Data.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("ELibrary.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminId");

                    b.Property<string>("Avatar");

                    b.Property<int?>("BookId");

                    b.Property<DateTime>("CreatOn");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("Email");

                    b.Property<int?>("GetBookId");

                    b.Property<int?>("LibraryId");

                    b.Property<string>("Password");

                    b.Property<int?>("PersonId");

                    b.Property<string>("Type");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("BookId");

                    b.HasIndex("GetBookId");

                    b.HasIndex("LibraryId");

                    b.HasIndex("PersonId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ELibrary.Data.Models.Book", b =>
                {
                    b.HasOne("ELibrary.Data.Models.GetBook")
                        .WithMany("Books")
                        .HasForeignKey("GetBookId");
                });

            modelBuilder.Entity("ELibrary.Data.Models.Genre", b =>
                {
                    b.HasOne("ELibrary.Data.Models.Book")
                        .WithMany("Genres")
                        .HasForeignKey("BookId");
                });

            modelBuilder.Entity("ELibrary.Data.Models.User", b =>
                {
                    b.HasOne("ELibrary.Data.Models.Admin")
                        .WithMany("Users")
                        .HasForeignKey("AdminId");

                    b.HasOne("ELibrary.Data.Models.Book")
                        .WithMany("Users")
                        .HasForeignKey("BookId");

                    b.HasOne("ELibrary.Data.Models.GetBook")
                        .WithMany("Users")
                        .HasForeignKey("GetBookId");

                    b.HasOne("ELibrary.Data.Models.Library")
                        .WithMany("Users")
                        .HasForeignKey("LibraryId");

                    b.HasOne("ELibrary.Data.Models.Person")
                        .WithMany("User")
                        .HasForeignKey("PersonId");
                });
#pragma warning restore 612, 618
        }
    }
}
